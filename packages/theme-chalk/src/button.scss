@use 'mixins/mixins.scss' as *;
@use 'mixins/utils.scss' as *;
@use 'common/var.scss' as *;
@use 'mixins/button' as *;
@use 'mixins/var' as *;
@use 'mixins/function.scss' as *;
@use 'sass:map';

@include b(button) {
  @include set-component-css-var('button', $button);
}

@include b(button) {
  display: inline-block;
  width: auto;
  margin: 0;
  font-weight: getCssVar('button', 'font-weight');
  line-height: 1;
  color: getCssVar('button', 'text-color');
  text-align: center;
  white-space: nowrap;
  cursor: pointer;
  background: getCssVar('button', 'bg-color');
  border: getCssVar('border');
  border-color: getCssVar('button', 'border-color');
  outline: none;
  box-sizing: border-box;
  transition: 0.1s;
  appearance: none;
  user-select: none;

  & + & {
    margin-left: 8px;
  }

  @include button-size(
    map.get($button-padding-vertical, 'default') - $button-border-width,
    map.get($button-padding-horizontal, 'default') - $button-border-width,
    map.get($button-font-size, 'default'),
    map.get($button-border-radius, 'default')
  );

  &:hover {
    color: getCssVar('color-primary');
    background-color: getCssVar('color-primary-light-9');
    border-color: getCssVar('color-primary-light-7');
    outline: none;
  }

  &:active {
    color: getCssVar('button', 'active-text-color');
    border-color: getCssVar('button', 'active-border-color');
    outline: none;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  & [class*='#{$namespace}-icon-'] {
    & + span {
      margin-left: 5px;
    }

    svg {
      vertical-align: bottom;
    }
  }

  /* size */

  @include m(small) {
    @include button-size(
      map.get($button-padding-vertical, 'small'),
      map.get($button-padding-horizontal, 'small'),
      map.get($button-font-size, 'small'),
      map.get($button-border-radius, 'small')
    );
    @include when(circle) {
      padding: map.get($button-padding-vertical, 'small');
    }
  }

  @include m(large) {
    @include button-size(
      map.get($button-padding-vertical, 'large'),
      map.get($button-padding-horizontal, 'large'),
      map.get($button-font-size, 'large'),
      map.get($button-border-radius, 'large')
    );

    @include when(circle) {
      padding: map.get($button-padding-vertical, 'large');
    }
  }

  /* other */
  @include when(plain) {
    @include css-var-from-global(('button', 'hover', 'text-color'), ('color', 'primary'));
    @include css-var-from-global(('button', 'hover', 'bg-color'), ('fill-color', 'blank'));
    @include css-var-from-global(('button', 'hover', 'border-color'), ('color', 'primary'));
  }

  @include when(active) {
    color: getCssVar('button', 'active', 'text-color');
    background-color: getCssVar('button', 'active', 'bg-color');
    border-color: getCssVar('button', 'active', 'border-color');
  }

  @include when(disabled) {
    &,
    &:hover,
    &:focus {
      color: getCssVar('button', 'disabled', 'text-color');
      cursor: not-allowed;
      background-color: getCssVar('button', 'disabled', 'bg-color');
      background-image: none;
      border-color: getCssVar('button', 'disabled', 'border-color');
    }
  }

  /* text */
  @include m(text) {
    padding-right: 0;
    padding-left: 0;
    color: getCssVar('button', 'text-color');
    background: transparent;
    border-color: transparent;

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'text-color');
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {
      &:hover {
        color: mix($color-white, $color-primary, $button-hover-tint-percent);
        background-color: transparent;
        border-color: transparent;
      }

      &:active {
        color: mix($color-black, $color-primary, $button-active-shade-percent);
        background-color: transparent;
        border-color: transparent;
      }
    }
  }

  @include m(link) {
    padding: 3px 0;
    color: getCssVar('color', 'primary');
    background-color: transparent;
    border-color: transparent;

    &:hover {
      position: relative;
      background-color: transparent;
      border-color: transparent;

      &::after {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: getCssVar('color', 'primary');
        content: '';
      }
    }

    @include when(disabled) {
      color: getCssVar('button', 'hover', 'border-color');
      cursor: not-allowed;
      background-color: transparent !important;
      border-color: transparent !important;

      &:hover,
      &:focus {
        color: getCssVar('button', 'hover', 'border-color');
      }

      &::after {
        display: none;
      }
    }
  }

  // 暂时还没有loading状态的按钮，因为没有icon组件；
  @include when(loading) {
    position: relative;
    pointer-events: none;

    &::before {
      position: absolute;
      top: -1px;
      right: -1px;
      bottom: -1px;
      left: -1px;
      pointer-events: none;
      background-color: rgb(255 255 255 / 35%);
      border-radius: inherit;
      content: '';
    }
  }
  @include when(round) {
    border-radius: 20px;
  }
  @include when(circle) {
    padding: map.get($button-padding-vertical, 'default') - $button-border-width;
    border-radius: 50%;
  }

  /* type */
  @include m(primary) {
    @include button-variant(
      $color-white,
      map.get($button-bg-color, 'primary'),
      map.get($button-border-color, 'primary')
    );
  }
  @include m(success) {
    @include button-variant(
      $color-white,
      map.get($button-bg-color, 'success'),
      map.get($button-border-color, 'success')
    );
  }

  @include m(warning) {
    @include button-variant(
      $color-white,
      map.get($button-bg-color, 'warning'),
      map.get($button-border-color, 'warning')
    );
  }

  @include m(danger) {
    @include button-variant($color-white, map.get($button-bg-color, 'danger'), map.get($button-border-color, 'danger'));
  }

  @include m(info) {
    @include button-variant($color-white, map.get($button-bg-color, 'info'), map.get($button-border-color, 'info'));
  }
}
