@use 'sass:map';
@use 'mixins/function.scss' as *;
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;

@include b(cascader) {
  @include set-component-css-var('cascader', $cascader);

  position: relative;
  display: inline-block;
  font-size: getCssVar('font-size', 'base');
  line-height: map.get($input-height, 'default');
  outline: none;

  &:not(.is-disabled):hover {
    .el-input__wrapper {
      cursor: pointer;
      box-shadow: 0 0 0 1px getCssVar('input', 'hover-border-color') inset;
    }
  }

  .el-input {
    cursor: pointer;

    --el-input-border-radius: 2px;

    .el-input__inner {
      cursor: pointer;

      &::selection {
        outline: none;
      }
    }

    .el-input__suffix-inner {
      .el-icon {
        height: calc(100% - 2px);

        svg {
          vertical-align: middle;
        }
      }
    }

    .icon-arrow-down {
      font-size: 14px;
      transition: transform getCssVar('transition-duration');

      @include when(reverse) {
        transform: rotateZ(180deg);
      }
    }

    .icon-circle-close:hover {
      color: var(#{getCssVarName('input', 'clear-hover-color')}, map.get($input, 'clear-hover-color'));
    }

    @include when(focus) {
      .el-input__wrapper {
        box-shadow: 0 0 0 1px
          var(#{getCssVarName('input', 'focus-border-color')}, map.get($input, 'focus-border-color')) inset;
      }
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      font-size: map.get($input-font-size, $size);
      line-height: map.get($input-height, $size);
    }
  }

  @include when(disabled) {
    .xs-cascader__label {
      z-index: calc(getCssVar('index', 'normal') + 1);
      color: getCssVar('disabled-text-color');
    }
  }

  @include when(no-arrow) {
    margin: -12px 0 !important;
  }

  @include e(dropdown) {
    @include set-component-css-var('cascader', $cascader);
  }

  @include e(dropdown) {
    font-size: getCssVar('cascader-menu-font-size');
    border-radius: getCssVar('cascader-menu-radius');

    @include picker-popper(
      getCssVar('cascader-menu-fill'),
      getCssVar('cascader-menu-border'),
      getCssVar('cascader-menu-shadow')
    );

    &.el-popper {
      box-shadow: getCssVar('cascader-menu-shadow');
    }
  }

  @include e(tags) {
    position: absolute;
    top: 50%;
    right: 30px;
    left: 0;
    display: flex;
    line-height: normal;
    text-align: left;
    transform: translateY(-50%);
    box-sizing: border-box;
    flex-wrap: wrap;

    .el-tag,
    .xs-tag {
      display: inline-flex;
      align-items: center;
      max-width: 100%;
      margin: 2px 0 2px 6px;
      text-overflow: ellipsis;
      background: getCssVar('cascader-tag-background');

      &:not(.is-hit) {
        border-color: transparent;
      }

      > span {
        flex: 1;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .el-icon-close {
        color: getCssVar('color-white');
        background-color: getCssVar('text-color', 'placeholder');
        flex: none;

        &:hover {
          background-color: getCssVar('text-color', 'secondary');
        }
      }
    }
  }

  @include e(collapse-tags) {
    z-index: getCssVar('index-normal');
    display: flex;
    white-space: normal;
    align-items: center;
    flex-wrap: wrap;
  }

  @include e(collapse-tag) {
    display: flex;
    height: inherit;
    line-height: inherit;
  }

  @include e(suggestion-panel) {
    border-radius: getCssVar('cascader-menu', 'radius');
  }

  @include e(suggestion-list) {
    max-height: 204px;
    padding: 6px 0;
    margin: 0;
    font-size: getCssVar('font-size', 'base');
    color: getCssVar('cascader-menu', 'text-color');
    text-align: center;
  }

  @include e(suggestion-item) {
    display: flex;
    height: 34px;
    padding: 0 15px;
    text-align: left;
    cursor: pointer;
    outline: none;
    justify-content: space-between;
    align-items: center;

    &:hover,
    &:focus {
      background: getCssVar('cascader-node', 'background-hover');
    }

    &.is-checked {
      font-weight: bold;
      color: getCssVar('cascader', 'menu-selected-text-color');
    }

    > span {
      margin-right: 10px;
    }
  }

  @include e(empty-text) {
    margin: 10px 0;
    color: getCssVar('cascader', 'color-empty');
  }

  @include e(search-input) {
    height: 24px;
    min-width: 60px;
    padding: 0;
    margin: 2px 0 2px map.get($input-padding-horizontal, 'default') - $border-width;
    color: getCssVar('cascader', 'menu-text-color');
    background: transparent;
    border: none;
    outline: none;
    box-sizing: border-box;
    flex: 1;

    &::placeholder {
      // two input overlap
      color: transparent;
    }
  }
}

.xs-cascader__dropdown {
  border-radius: 2px;

  &.is-no-arrow {
    margin: -10px 0 !important;
  }
}
